name: CI
permissions:
  contents: write

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version bump
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin main
          MAIN=$(jq -r .version <(git show origin/main:package.json))
          PR=$(jq -r .version package.json)
          if [ "$(printf '%s\n%s\n' "$MAIN" "$PR" | sort -V | head -n1)" = "$PR" ]; then
            echo "Version must be bumped: PR ($PR) ≤ main ($MAIN)"
            exit 1
          fi

  build:
    needs: version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package.outputs.version }}
      vsix-path: ${{ steps.package.outputs.vsix }}
      vsix-name: ${{ steps.package.outputs.name }}    

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install        

      - name: Compile TypeScript
        run: npm run compile        

      - name: Bundle with esbuild
        run: npm run bundle        

      - name: Install VSCE CLI
        run: npm install --global vsce
       
      - name: Package VSIX
        id: package
        run: |
          mkdir -p dist
          npm run package 
          NAME=$(jq -r .name package.json)
          VERSION=$(jq -r .version package.json)
          FINAL="dist/${NAME}-${VERSION}.vsix"
          echo "version=${VERSION}"       >> $GITHUB_OUTPUT
          echo "vsix=${FINAL}"            >> $GITHUB_OUTPUT
          echo "name=${NAME}-${VERSION}.vsix" >> $GITHUB_OUTPUT                 

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.vsix }}
          overwrite: true

  release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.vsix-name }}
          path: dist/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: v${{ needs.build.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.vsix-path }}
          asset_name: ${{ needs.build.outputs.vsix-name }}
          asset_content_type: application/octet-stream

# ↓ Добавь после job "release"
  publish:
    if: github.event_name == 'push'
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.vsix-name }}
          path: dist/

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install CLIs
        run: npm i -g vsce ovsx

      # Публикация в Visual Studio Marketplace
      - name: Publish to VS Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          # Публикуем уже собранный артефакт
          vsce publish --pat "$VSCE_PAT" --packagePath "dist/${{ needs.build.outputs.vsix-name }}"

      # Публикация в Open VSX
      - name: Publish to Open VSX
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          ovsx publish "dist/${{ needs.build.outputs.vsix-name }}" -p "$OVSX_PAT"
